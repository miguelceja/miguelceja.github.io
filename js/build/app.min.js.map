{"version":3,"sources":["../app.js"],"names":["window","onload","$","text","html","Math","round","addClass","each","on","append","attr","setTimeout","push","length","floor","random","removeClass","forEach","includes","parseInt","filter"],"mappings":"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","file":"app.min.js","sourcesContent":["\n\nwindow.onload = (function () {\n  init();\n  let isGameOver = false;\n  let isDraw = false;\n  let player = 'X';\n  let turnNumber = 1;\n\n  function init() {\n    setupGame();\n    setupReset();\n  }\n\n  // TODO: Replace \"O\" and \"X\" with Mario and Luigi or maybe some fun emojis.\n  // TODO: Refactor/cleanup code!\n\n  function updateGameStatusText(isNewGame) {\n    if (isDraw) {\n      $('.game-status').text(`It's a draw!  Hit reset to play again.`);\n      player = player === 'X' ? 'O' : 'X';\n      turnNumber++;\n    } else if (isGameOver) {\n      const winner = player === 'O' ? 'I' : 'You';\n      const finalMsg = player === 'O' ? 'Wanna play again?' : 'Rematch?';\n\n      $('.game-status').html(\n        `Nice game! ðŸ™Œ\n        <br>${winner} won in ${Math.round(turnNumber / 2)} turns!\n        <br>${finalMsg}`\n      );\n\n      $('.wrapper').addClass('game-over');\n    } else if (isNewGame) {\n      $('.game-status').text('Your move.');\n    } else {\n      player = player === 'X' ? 'O' : 'X';\n      turnNumber++;\n\n      const turnMsg = player === 'X' ? 'Your move.' : \"I'm thinking...\";\n      $('.game-status').text(turnMsg);\n    }\n  }\n\n  function setupGame() {\n    const buttons = $('.button');\n\n    $.each(buttons, (i, button) => {\n      $(button).on('click', function (e) {\n        updateSquare(button, buttons);\n      });\n    });\n  }\n\n  function updateSquare(button, buttons) {\n    $(button).text(player);\n    $(button).append(`<span class=\"turn-number\">${turnNumber}</span>`);\n\n    checkStatus(player);\n\n    if (isGameOver) {\n      updateGameStatusText();\n      turnNumber = 1;\n\n      $.each(buttons, (i, button) => {\n        $(button).attr('disabled', true);\n      });\n\n      return false;\n    }\n\n    updateGameStatusText();\n\n    $(button).attr('disabled', true);\n\n    computerMove();\n  }\n\n  function computerMove() {\n    setTimeout(() => {\n      const availableSquares = [];\n      // Loop through all buttons, create an array of \"available\" buttons\n      const buttons = $('.button');\n      $.each(buttons, (i, v) => {\n        const isAvailableSquare = $(v).attr('disabled') !== 'disabled';\n\n        if (isAvailableSquare) {\n          availableSquares.push(v);\n        }\n      });\n\n      // Choose random available square and recreate a \"chosen square\"\n      const availableSquaresLength = availableSquares.length;\n      const randomIndex = Math.floor(Math.random() * availableSquaresLength);\n      const computerSelection = $(availableSquares[randomIndex]);\n\n      $(computerSelection)\n        .text(player)\n        .append(`<span class=\"turn-number\">${turnNumber}</span>`)\n        .attr('disabled', true);\n\n      checkStatus();\n      updateGameStatusText();\n    }, 1000);\n  }\n\n  function setupReset() {\n    $('.reset-game').on('click', function () {\n      // Loop through all buttons, reset text, remove disabled, remove winner text.\n      const buttons = $('.button');\n\n      $.each(buttons, (i, button) => {\n        $(button)\n          .text('')\n          .removeClass('winning-square')\n          .attr('disabled', false);\n      });\n\n      isDraw = false;\n      isGameOver = false;\n      player = 'X';\n      turnNumber = 1;\n\n      updateGameStatusText(true);\n\n      $('.wrapper').removeClass('game-over');\n    });\n  }\n\n  function checkStatus() {\n    const buttons = $('.button');\n\n    const winningRows = [\n      ['X1', 'X2', 'X3'],\n      ['O1', 'O2', 'O3'],\n      ['X4', 'X5', 'X6'],\n      ['O4', 'O5', 'O6'],\n      ['X7', 'X8', 'X9'],\n      ['O7', 'O8', 'O9'],\n      ['X1', 'X4', 'X7'],\n      ['O1', 'O4', 'O7'],\n      ['X2', 'X5', 'X8'],\n      ['O2', 'O5', 'O8'],\n      ['X3', 'X6', 'X9'],\n      ['O3', 'O6', 'O9'],\n      ['X1', 'X5', 'X9'],\n      ['O1', 'O5', 'O9'],\n      ['X3', 'X5', 'X7'],\n      ['O3', 'O5', 'O7'],\n    ];\n\n    const squaresData = [];\n\n    $.each(buttons, (i, button) => {\n      const player = $(button).text()[0] || '';\n      const squarePlayer = player ? `${player}${i + 1}` : '';\n      squaresData.push(squarePlayer); // + 1 to match winningRows numbers\n    });\n\n    for (let i = 0; i < winningRows.length; i++) {\n      const row = winningRows[i];\n      const playerRows = [];\n      row.forEach((square) => {\n        if (squaresData.includes(square)) {\n          playerRows.push(square);\n        }\n      });\n\n      if (playerRows.length === 3) {\n        isGameOver = true;\n\n        row.forEach((square) => {\n          const squareNumb = parseInt(square[1] - 1, 10); // -1 to match html class numbers\n          $(`.button-${squareNumb}`).addClass('winning-square');\n        });\n\n        break;\n      }\n    }\n\n    // Check if all 9 squares are filled in.  If so and !isGameOver, then it's a draw.\n    const playedSquares = squaresData.filter((s) => s);\n\n    if (playedSquares.length === 9 && !isGameOver) {\n      isDraw = true;\n    }\n  }\n})();\n"]}